import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.stream.Collectors;

import com.mysql.cj.MysqlxSession;
import com.mysql.cj.exceptions.AssertionFailedException;
import com.mysql.cj.protocol.x.StatementExecuteOk;
import com.mysql.cj.protocol.x.XMessage;
import com.mysql.cj.protocol.x.XMessageBuilder;

public class AddStatementImpl implements AddStatement {
    private MysqlxSession mysqlxSession;
    private String schemaName;
    private String collectionName;
    private List<DbDoc> newDocs;
    private boolean upsert = false;

    /* package private */ AddStatementImpl(MysqlxSession mysqlxSession, String schema, String collection, DbDoc newDoc) {
        this.mysqlxSession = mysqlxSession;
        this.schemaName = schema;
        this.collectionName = collection;
        this.newDocs = new ArrayList<>();
        this.newDocs.add(newDoc);
    }

    /* package private */ AddStatementImpl(MysqlxSession mysqlxSession, String schema, String collection, DbDoc[] newDocs) {
        this.mysqlxSession = mysqlxSession;
        this.schemaName = schema;
        this.collectionName = collection;
        this.newDocs = new ArrayList<>();
        this.newDocs.addAll(Arrays.asList(newDocs));
    }

    public AddStatement add(String jsonString) {
        try {
            DbDoc doc = JsonParser.parseDoc(new StringReader(jsonString));
            return add(doc);
        } catch (IOException ex) {
            throw AssertionFailedException.shouldNotHappen(ex);
        }
    }

    public AddStatement add(DbDoc... docs) {
        this.newDocs.addAll(Arrays.asList(docs));
        return this;
    }

    private List<String> serializeDocs() {
        return this.newDocs.stream().map(DbDoc::toString).collect(Collectors.toList());
    }

    public AddResult execute() {
        if (this.newDocs.size() == 0) { // according to X DevAPI specification, this is a no-op. we create an empty Result
            StatementExecuteOk ok = new StatementExecuteOk(0, null, Collections.emptyList(), Collections.emptyList());
            return new AddResultImpl(ok);
        }
        StatementExecuteOk ok = this.mysqlxSession.sendMessage(((XMessageBuilder) this.mysqlxSession.<XMessage> getMessageBuilder())
                .buildDocInsert(this.schemaName, this.collectionName, serializeDocs(), this.upsert));
        return new AddResultImpl(ok);
    }

    public CompletableFuture<AddResult> executeAsync() {
        CompletableFuture<StatementExecuteOk> okF = this.mysqlxSession.asyncSendMessage(((XMessageBuilder) this.mysqlxSession.<XMessage> getMessageBuilder())
                .buildDocInsert(this.schemaName, this.collectionName, serializeDocs(), this.upsert));
        return okF.thenApply(ok -> new AddResultImpl(ok));
    }

    public boolean isUpsert() {
        return this.upsert;
    }

    public AddStatement setUpsert(boolean upsert) {
        this.upsert = upsert;
        return this;
    }
}
